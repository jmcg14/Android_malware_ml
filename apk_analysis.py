
import sklearn
import numpy as np
import timeit
from timeit import default_timer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.metrics import confusion_matrix
from sklearn.tree import DecisionTreeClassifier

def main():
    '''
    Notes for running:
    - written for python 2.7 -> change print statements if using 3
    - required deps -> install scikit learn (google it)
    - edit filepaths
    '''
    good_path = '/data/goodPermissionsFinal.txt'
    mal_path = '/data/malwarePermissionsFinal.txt'

    #read in lines of permission data from input files
    with open(good_path) as f:
        gdprm = f.readlines()
    with open(mal_path) as f:
        mlprm = f.readlines()
    perms = gdprm + mlprm

    #concat input files
    labels = np.array([])

    #match indices of input data with corresponding labels
    for x in gdprm:
        labels = np.append(labels, 0)
    for x in mlprm:
        labels = np.append(labels, 1)

    #vectorize input data according to permission extracting regex
    count_vect = CountVectorizer(input=u'content', analyzer=u'word', token_pattern= '(\\b(:?uses-|optional-)?permission:\s[^\s]*)')
    time0 = timeit.default_timer()
    features = count_vect.fit_transform(perms)
    time1 = timeit.default_timer() #time to tokenize

    print 'tokenize time: ' + str(time1-time0)
    print '\n'
    print 'ouput: train_ratio, avg_acc, avg_true_pos, avg_true_neg, avg_fpos_rate, avg_fneg_rate, avg_train_time, avg_test_time'
    #proportion of data to test on vs total
    ratios = [.8, .6, .4, .2]

    print "MultiNomialNB"
    for x in ratios:
        NBclf = MultinomialNB()
        test_model(NBclf, features, labels, x)

    print '---------------------------'
    print "DecisionTree"
    for x in ratios:
        DTclf = DecisionTreeClassifier(min_samples_split = 10)
        test_model(DTclf, features, labels, x)

    print '---------------------------'
    print "LogisticRegression"
    for x in ratios:
        LRclf = LogisticRegression(C=10, solver='lbfgs')
        test_model(LRclf, features, labels, x)
    return

def test_model(model, features, labels, test_size):
    '''
    recieves an instance of an untrained model plus features and labels. performs
    training on 5 splits of data at ratio specified by test size.
    '''
    sss = StratifiedShuffleSplit(n_splits=5, test_size=test_size)
    avg_acc = 0.0
    avg_true_pos = 0.0
    avg_true_neg = 0.0
    avg_fpos = 0.0
    avg_fneg = 0.0
    avg_train_time = 0.0
    avg_test_time = 0.0

    for train_index, test_index in sss.split(features, labels):
        X_train, X_test = features[train_index], features[test_index]
        y_train, y_test = labels[train_index], labels[test_index]

        time0 = timeit.default_timer()
        model.fit(X_train, y_train)
        time1 = timeit.default_timer()
        pred = model.predict(X_test)
        time2 = timeit.default_timer()
        conf_mat = confusion_matrix(y_test, pred)
        test_len = len(y_test)
        correct = conf_mat[0][0] + conf_mat[1][1]
        f_pos = conf_mat[0][1]
        f_neg = conf_mat[1][0]
        avg_acc += float(correct)/test_len
        avg_true_pos += conf_mat[0][0]
        avg_true_neg += conf_mat[1][1]
        avg_fpos += float(f_pos)/test_len
        avg_fneg += float(f_neg)/test_len
        avg_train_time += time1-time0
        avg_test_time += time2-time1
        #print conf_mat

    avg_acc /= 5
    avg_true_pos /= 5
    avg_true_neg /= 5
    avg_fpos /= 5
    avg_fneg /= 5
    avg_train_time /= 5
    avg_test_time /= 5
    #ouput: train_ratio, avg_acc, avg_true_pos, avg_true_neg, avg_fpos_rate, avg_fneg_rate, avg_train_time, avg_test_time
    results = "%.2f, %.3lf, %.3lf, %.3lf, %.3lf, %.3f, %.3f, %.3f" % (1-test_size, avg_acc, avg_true_pos, avg_true_neg, avg_fpos, avg_fneg, avg_train_time, avg_test_time)
    print str(results)
    return

if __name__ == "__main__":
    main()
